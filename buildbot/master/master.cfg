# -*- python -*-
# ex: set syntax=python:


import subprocess
from buildbot.process.properties import Interpolate




def find_branches(svn_url,username,password):


    svn_branches = subprocess.check_output(['svn','ls',svn_url,'--username', username, '--password', password])
    svn_branch_list = svn_branches.split('/\n')

    # remove all empty strings from the image list
    while (True):
        try:
            svn_branch_list.remove("")
        except ValueError:
            break


    for branch in reversed(svn_branch_list):

        testscripts = "%s/%s/test/scripts" % (svn_url, branch)
        #print testscripts
        found = subprocess.call(['svn','ls',testscripts])
        # if we can't find the test/scripts directory, we can't test the branch
        if found != 0:
            print "%s Not Found" % testscripts
            svn_branch_list.remove(branch)
        else:
            print "%s Found" % testscripts
            svn_idx=svn_branch_list.index(branch)
            if 'private_branches' in svn_url:
                svn_branch_list[svn_idx]="private_branches/%s" % branch
            else:
                svn_branch_list[svn_idx]="branches/%s" % branch

    return svn_branch_list







#def find_images(config_file,password_file):
#
#
#    cloud_connection_manager = OFSNovaConnectionManager.OFSNovaConnectionManager(cloud_config_file=config_file,password_file=password_file)
#    image_list = cloud_connection_manager.getAllCloudImages()
#    image_list_names = [i.name for i in image_list if i.status == 'active' and i.deleted == False]
#
#     return only unique items
#    return list(set(image_list_names))

#     command_line = "euca-describe-images --conf ${ec2conffile} | awk '{print $3}' | grep -v None | sed s/^\"[0-9]*\/\"// | sed s/\".raw.manifest.xml\"//"
#
#      ^ is why I <3 command line unix.
#
#          pipe = subprocess.Popen(['euca-describe-images','--config',ec2conffile],stdin=subprocess.PIPE,stdout=subprocess.PIPE)
#          pipe = subprocess.Popen(['awk','{print $3}'],stdin=pipe.stdout,stdout=subprocess.PIPE)
#          pipe = subprocess.Popen(['grep','-v','None'],stdin=pipe.stdout,stdout=subprocess.PIPE)
#          pipe = subprocess.Popen(['sed','s/^[0-9]*\///'],stdin=pipe.stdout,stdout=subprocess.PIPE)
#          pipe = subprocess.Popen(['sed','s/.qcow.manifest.xml//'],stdin=pipe.stdout,stdout=subprocess.PIPE)
#     pipe = subprocess.Popen(command_line,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE,bufsize=-1)
#     all_images = pipe.communicate()[0]
#
#      split the string into a list.
#     print image_list
#
#      remove all empty strings from the image list
#     while (True):
#         try:
#             image_list.remove("")
#         except ValueError:
#             break
#
#

#     return list(set(image_list))


def my_file_splitter(path):
         pieces = path.split('/')
         if pieces[0] == 'trunk':
             branch = None
             pieces.pop(0) # remove 'trunk'
         elif pieces[0] == 'branches':
             pieces.pop(0) # remove 'branches'
             # grab branch runtests_force_stablename
             branch = 'branches/' + pieces.pop(0)
         #else:
         #    return None # something weird
         #if branch != 'trunk' && branch != 'branches/stable' :
          #   return None # wrong project

         return (branch, '/'.join(pieces))




def create_build_factory():

    test_list = ['cp','misc','mkdir-sysint','ping','symlink-sysint','zerofill','append','append2','bonnie','dbench','fdtree','fstest','fsx','iozone','ltp','mkdir-vfs','shelltest','symlink-vfs','tail','vfs-cp','functions','heidelberg-IO','ior-mpiio','ior-mpiio-2','ior-mpiio-3','mpi-io-test','noncontig','romio-async','romio-coll_test','romio-error','romio-excl','romio-file_info','romio-noncontig_coll2','romio-psimple','romio-simple','romio-split_coll','romio-status','stadler-file-view-test']

    my_factory = BuildFactory()


    #pass
    #create a "dynamic builder" by interpolating from build parameters
    my_url_base = "https://dev.orangefs.org/svn/orangefs/"
    #my_url = my_url_base+"branches/OFSTest-dev"




#    my_factory.addStep(SVN(repourl=Interpolate(my_url_base+"branches/%(prop:branch)s")))
    my_factory.addStep(SVN(repourl=Interpolate("https://github.com/jdburton/OFSTest/%(prop:branch)s"),logEnviron=False))

    my_factory.addStep(ShellCommand(command=["./start_test","-f","./config/OFSTest-defaults-aws-Frankfurt.conf",
                                    "-d",Interpolate('%(prop:buildername)s-%(prop:buildnumber)s'),
                                    Interpolate('ofs_resource_location='+my_url_base+'%(prop:ofs_branch)s'),
                                    #Interpolate('ofs_resource_location='+my_url_base+'%(prop:ofs_branch)s'+'%(prop:revision:+@%(prop:revision)s)s'),
                                    "ofs_resource_type=SVN",
                                    Interpolate('cloud_image=%(prop:vmimage)s'),
                                    Interpolate('number_new_cloud_nodes=%(prop:number_instances)s'),
                                    Interpolate('number_metadata_servers=%(prop:number_metadata_servers)s'),
                                    Interpolate('number_data_servers=%(prop:number_data_servers)s'),
                                    Interpolate('cloud_machine=%(prop:vmtype)s'),
                                    Interpolate('cloud_machine=%(prop:vmtype)s'),
                                    Interpolate('ofs_database=%(prop:ofs_database)s'),
                                    Interpolate('run_usrint_tests=%(prop:run_usrint_tests)s'),
                                    Interpolate('run_hadoop_tests=%(prop:run_hadoop_tests)s'),
                                    Interpolate('run_mpi_tests=%(prop:run_mpi_tests)s'),
                                    Interpolate('run_mpi_benchmarks=%(prop:run_mpi_benchmarks)s'),
                                    #Interpolate('install_shared=%(prop:run_usrint_tests)s'),
                                    'install_shared=True',
                                    Interpolate('run_sysint_tests=%(prop:run_sysint_tests)s'),
                                    Interpolate('run_vfs_tests=%(prop:run_vfs_tests)s'),
                                    Interpolate('run_vfs_benchmarks=%(prop:run_vfs_benchmarks)s'),
                                    Interpolate('run_fuse_tests=%(prop:run_fuse_tests)s'),
                                    Interpolate('install_fuse=%(prop:run_fuse_tests)s'),
                                    #Interpolate('cloud_delete_after_test=%(prop:delete_instances)s'),
                                    Interpolate('cloud_delete_after_test=%(prop:delete_instances)s'),
                                    Interpolate('stop_on_failure=%(prop:stop_on_failure)s'),
                                    Interpolate('enable_strict=%(prop:enable_strict)s'),
                                    Interpolate('ofs_disable_acache=%(prop:ofs_disable_acache)s'),
                                    Interpolate('configure_opts=%(prop:configure_opts)s'),
                                    Interpolate('ofs_security_mode=%(prop:ofs_security_mode)s'),
                                    #Interpolate('pvfs2_genconfig_opts=%(prop:pvfs2_genconfig_opts)s'),
                                    #Interpolate('ofs_mount_as_fuse=%(prop:run_fuse_tests)s'),
                                    'install_MPI=True',
                                    Interpolate('install_hadoop=%(prop:run_hadoop_tests)s'),
                                    Interpolate('hadoop_version=%(prop:hadoop_version)s'),
                                    Interpolate('svn_options=-r %(prop:svn_version)s'),
                                    Interpolate('pvfs2_genconfig_opts=-r %(prop:pvfs2_genconfig_opts)s'),
                                    Interpolate('custom_kernel=%(prop:custom_kernel)s'),
                                    Interpolate('kernel_git_location=%(prop:kernel_git_location)s'),
                                    Interpolate('kernel_git_branch=%(prop:kernel_git_branch)s'),
                                    Interpolate('spot_instance_bid=%(prop:spot_instance_bid)s'),
                                    #Interpolate('install_opts=%(prop:install_opts)s'),

                                    #'ldap_server_uri=ldap://130.127.192.100',
                                    'ldap_server_uri=ldap://172.31.12.35',
                    'ldap_admin=cn=admin,dc=ofstest,dc=omnibond,dc=com',
                    'ldap_admin_password=admin',
                    'svn_username=jburto2',
                    'svn_password=$SVN_PASS',
                    #Interpolate('ldap_container=dc=%(prop:ldap_system)s,dc=ofstest,dc=omnibond,dc=com')
                    Interpolate('ldap_container=dc=ofstest,dc=omnibond,dc=com')


                                    ],logEnviron=False,
                        timeout=14400))
    my_factory.addStep(ShellCommand(command=["./start_test","-f","./config/OFSTest-defaults-aws-Frankfurt.conf","-d",Interpolate('%(prop:buildername)s-%(prop:buildnumber)s'),"-c",Interpolate('cloud_delete_after_test=%(prop:delete_instances)s')],logEnviron=False,timeout=300))
    my_factory.addStep(ShellCommand(command=["/bin/cat",Interpolate("./%(prop:buildername)s-%(prop:buildnumber)s/OFSTest.log")],logEnviron=False))
    # look for failures in the log. If found, return 1
    my_factory.addStep(ShellCommand(command=Interpolate("if /bin/grep \"FAIL\" ./%(prop:buildername)s-%(prop:buildnumber)s/OFSTest.log; then exit 1; else exit 0; fi"),logEnviron=False))
    my_factory.addStep(ShellCommand(command=["/bin/cat",Interpolate("./%(prop:buildername)s-%(prop:buildnumber)s/ofsnode-commands.log")],logEnviron=False))



    return my_factory

userlist=[("jburto2","jburto2"),("denton","denton"),("ligon","ligon"),("sampson","sampson"),("walt","walt"),("b","b"),("elaine","elaine"),("hubcap","hubcap"),("wolf","wolf"),("marbran","marbran")]

def canBuild(username, builder_status):


    if username == 'jburto2':
        return True # jburto2 can force whatever they want
    builder_name = builder_status.getName()
    print "Username %s, builder_status %s" % (username, builder_name)

    if username in builder_name:
        return True # any authenticated user can run smoketest
    else:
        return False



c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
slave_list= [BuildSlave("jburto2-slave", "password"), BuildSlave("elaine-slave", "password"), BuildSlave("marbran-slave", "password"),BuildSlave("denton-slave", "password"), BuildSlave("ligon-slave", "password"), BuildSlave("walt-slave", "password"),BuildSlave("sampson-slave", "password"), BuildSlave("hubcap-slave", "password"), BuildSlave("wolf-slave", "password"), BuildSlave("b-slave", "password"), BuildSlave("jburto2-slave1", "password"),BuildSlave("jburto2-slave2", "password"),BuildSlave("jburto2-slave3", "password")]

c['slaves'] = slave_list

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

#from buildbot.changes.gitpoller import GitPoller
#c['change_source'] = []
#c['change_source'].append(GitPoller(
#        workdir='gitpoller-workdir', branch='master',
#        pollinterval=300))

#check trunk and branches/stable
from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = []
#c['change_source'].append(SVNPoller("http://dev.orangefs.org/svn/orangefs",split_file=my_file_splitter,pollinterval=3600))
c['change_source'].append(SVNPoller("http://dev.orangefs.org/svn/orangefs/trunk",pollinterval=300))
c['change_source'].append(SVNPoller("http://dev.orangefs.org/svn/orangefs/branches/stable",pollinterval=300))




from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.forcesched import *
from buildbot.changes import filter

from buildbot.schedulers.basic import SingleBranchScheduler



from buildbot.process.factory import BuildFactory
#from buildbot.steps.source.git import Git
from buildbot.steps.source.svn import SVN
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig

import os
svn_username='jburto2'
svn_password=os.environ['SVN_PASS']
my_branch_list =  find_branches("http://dev.orangefs.org/svn/orangefs/branches",svn_username, svn_password)
my_branch_list =  my_branch_list + find_branches("https://dev.orangefs.org/svn/orangefs/private_branches",svn_username, svn_password)
my_branch_list.insert(0,"trunk")
#my_branch_list.append("trunk")
#my_image_list=find_images("/home/ubuntu/cuer1/OrangeFS-openrc.sh","/home/ubuntu/.ubuntupw")
my_image_list = ['cloud-centos7-ofstest','cloud-rhel7-ofstest','cloud-centos6-ofstest','cloud-fedora25-ofstest','cloud-fedora24-ofstest','cloud-fedora26-ofstest','cloud-ubuntu-14.04-ofstest','cloud-ubuntu-16.04-ofstest','cloud-ubuntu-16.10-ofstest','cloud-sles12-ofstest','cloud-opensuse421-ofstest','cloud-centos7-ml-ofstest','cloud-centos7-lt-ofstest','cloud-oracle7-ofstest','cloud-oracle7-lt-ofstest']
#my_image_list = ['jburton-packer-fedora-23-1443472845','jburton-packer-centos7-1443201932','jburton-packer-centos6-1445541244','jburton-packer-ubuntu-14.04-1443204307','jburton-packer-ubuntu-15.04-1443461823','jburton-packer-opensuse-13.2-1444839866', 'jburton-packer-fedora-22-1443464507','jburton-packer-sles-12-1443725773', 'jburton-packer-centos7-1445972707', 'jburton-packer-ubuntu-14.04-1446061659', 'jburton-packer-ubuntu-15.04-1446066113','jburton-packer-opensuse-13.2-1446059303', 'jburton-packer-centos6-1446689918']




print my_image_list

my_flavor_list = [
           't2.small',
           't2.medium',
           'm3.medium',
           'm4.medium',
           'm3.large',
           'm4.large',
           'c3.large',
           'c4.large',
           'm3.xlarge',
           'm4.xlarge',
           'c3.xlarge',
           'c4.xlarge',
           'r3.xlarge',
           'd2.xlarge',
           'i2.xlarge',
           'm3.2xlarge',
           'm4.2xlarge',
           'c3.2xlarge',
           'c4.2xlarge',
           'r3.2xlarge',
           'd2.2xlarge',
           'i2.2xlarge',
           'c3.4xlarge',
           'c4.4xlarge',
           'r3.4xlarge',
           'd2.4xlarge',
           'i2.4xlarge',
           'c3.8xlarge',
           'c4.8xlarge',
           'r3.8xlarge',
           'd2.8xlarge',
           'i2.8xlarge',
           'm4.10xlarge'
           ]


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

c['builders'] = []
c['schedulers'] = []

#now create the dynamic builder for force scheduler

dynamic_builder_name_list = []
for my_user_name in userlist:

    my_factory = create_build_factory()
    my_builder_name = "%s_builder" % my_user_name[0]
    my_slave_name = "%s-slave" % my_user_name[0]
    if my_user_name[0] == "jburto2":
        c['builders'].append(BuilderConfig(name=my_builder_name,slavenames=[my_slave_name, my_slave_name+"1", my_slave_name+"2", my_slave_name+"3"],factory=my_factory))
    else:
        c['builders'].append(BuilderConfig(name=my_builder_name,slavenames=[my_slave_name],factory=my_factory))

    dynamic_builder_name_list.append(my_builder_name)


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build



force_sched = ForceScheduler(
                            name="force",
                            builderNames=dynamic_builder_name_list,
                            branch=ChoiceStringParameter(name="branch",choices=["trunk","branches/development"],default="trunk"),
                            project=FixedParameter(name="project", default=""),
                            username=UserNameParameter(label="your name:<br>", size=80),

                            repository=FixedParameter(name="repository", default=""),
                            #revision=FixedParameter(name="revision", default=""),
                            properties=[
                                StringParameter(name="reason",label="Reason for Test",default=""),
                                ChoiceStringParameter(name="ofs_branch",label="OrangeFS branch", choices=my_branch_list,default='trunk'),
                                StringParameter(name="svn_version",label="OrangeFS branch svn revision",default="HEAD"),
                                ChoiceStringParameter(name="vmimage", label="Image Type",choices=my_image_list,default='cloud-centos6-ofstest'),
                                ChoiceStringParameter(name="vmtype",label="Size of instance",choices=my_flavor_list,default='t2.medium'),
                                ChoiceStringParameter(name="ofs_database",label="Database",choices=['lmdb','bdb','cassandra'],default='bdb'),
                                IntParameter(name="number_instances",label="Number of Instances", default=4),
                                IntParameter(name="number_metadata_servers",label="Number of Metadata Servers", default=4),
                                IntParameter(name="number_data_servers",label="Number of Data Servers", default=4),
                                BooleanParameter(name="run_sysint_tests",label="Run System Integration Tests", default=False),
                                BooleanParameter(name="run_vfs_tests",label="Run VFS (kmod) Tests", default=False),
                                BooleanParameter(name="run_vfs_benchmarks",label="Run VFS (kmod) Benchmarks", default=False),
                                BooleanParameter(name="run_fuse_tests",label="Run VFS (fuse) Tests", default=False),
                                BooleanParameter(name="run_mpi_tests",label="Run MPI Tests", default=False),
                                BooleanParameter(name="run_mpi_benchmarks",label="Run MPI Benchmarks", default=False),
                                BooleanParameter(name="run_usrint_tests",label="Run User Integration Tests", default=False),
                                BooleanParameter(name="run_hadoop_tests",label="Run Hadoop Tests", default=False),
                                ChoiceStringParameter(name="hadoop_version",label="Hadoop Version",choices=['hadoop-2.7.2','hadoop-2.7.1'],default='hadoop-2.7.2'),
                                ChoiceStringParameter(name="ofs_security_mode",label="Security Mode",choices=['Default','Key','Cert'],default='Default'),
                                ChoiceStringParameter(name="ldap_system",label="LDAP system",choices=['None','centos7','centos6','fedora','ubuntu','suse'],default='centos6'),
                                StringParameter(name="configure_opts",label="Additional configure options for OrangeFS build (./configure)",default=""),
                                StringParameter(name="pvfs2_genconfig_opts",label="OrangeFS configuration string (pvfs2-genconfig). Leave blank for default configuration (Recommended).",default=""),
                                #StringParameter(name="install_opts",label="Additional options for install",default=""),
                                BooleanParameter(name="enable_strict",label="Strict Compile Options (disable for CentOS 5)", default=True),
                                BooleanParameter(name="ofs_disable_acache",label="Disable acache", default=False),
                                #BooleanParameter(name="delete_instances",label="Delete After Successful Run", default=True),
                                BooleanParameter(name="delete_instances",label="Delete Instance After Test Run?", default=True),
                                BooleanParameter(name="stop_on_failure",label="Stop all tests on test failure (overrides delete instance)?", default=False),
                                #StringParameter(name="pvfs2_genconfig_opts",label="Alternate options for pvfs2_genconfig",default=""),
                                BooleanParameter(name="custom_kernel",label="Use custom linux kernel?",default=False),
                                StringParameter(name="kernel_git_location",label="Location of custom kernel (git url)",default="https://github.com/torvalds/linux.git"),
                                StringParameter(name="kernel_git_branch",label="Git branch of custom kernel",default="master"),
                                StringParameter(name="spot_instance_bid",label="AWS spot price bid (leave blank for on-demand)",default="auto")

                                ]

                            )

c['schedulers'].append(force_sched)




####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.


c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.mail import MailNotifier

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(userlist),
    gracefulShutdown = False,
    #forceBuild = 'auth', # use this to test your slave once it is set up
    forceBuild = canBuild,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = canBuild,
    stopAllBuilds = False,
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

c['status'].append(MailNotifier(fromaddr="jburto2@clemson.edu", sendToInterestedUsers=False, extraRecipients=["jburto2@clemson.edu"], useTls=True, relayhost="smtp.clemson.edu", smtpPort=465, smtpUser="jburto2@clemson.edu", smtpPassword=svn_password))
#c['status'].append(MailNotifier(fromaddr="ofs-buildbot@clemson.edu", sendToInterestedUsers=False, extraRecipients=["@clemson.edu"]))



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OrangeFS"
c['titleURL'] = "http://www.orangefs.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = "http://buildbot-ofs.clemson.edu:8010/"
#c['buildbotURL'] = "http://buildbot-ofs.clemson.edu:8010/"
c['buildbotURL'] = "http://52.58.234.69:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
# -*- python -*-
# ex: set syntax=python:


from OFSTest import *
import subprocess
from buildbot.process.properties import Interpolate




def find_branches(svn_url):
	
    svn_branches = subprocess.check_output(['svn','ls',svn_url])
    svn_branch_list = svn_branches.split('/\n')

    # remove all empty strings from the image list
    while (True):
        try:
            svn_branch_list.remove("")
        except ValueError:
            break


    for branch in reversed(svn_branch_list):
        
        testscripts = "%s/%s/test/scripts" % (svn_url, branch)
        #print testscripts
        found = subprocess.call(['svn','ls',testscripts])
        # if we can't find the test/scripts directory, we can't test the branch
        if found != 0:
            print "%s Not Found" % testscripts
            svn_branch_list.remove(branch)
        else:
            print "%s Found" % testscripts
            svn_idx=svn_branch_list.index(branch)
            svn_branch_list[svn_idx]="branches/%s" % branch

    return svn_branch_list

    
    




def find_images(config_file,password_file):
	

    cloud_connection_manager = OFSNovaConnectionManager.OFSNovaConnectionManager(cloud_config_file=config_file,password_file=password_file)
    image_list = cloud_connection_manager.getAllCloudImages()
    image_list_names = [i.name for i in image_list if i.status == 'active' and i.deleted == False]

# 	return only unique items    
    return list(set(image_list_names))
    
#     command_line = "euca-describe-images --conf ${ec2conffile} | awk '{print $3}' | grep -v None | sed s/^\"[0-9]*\/\"// | sed s/\".raw.manifest.xml\"//"
#     
# 	 ^ is why I <3 command line unix.
# 	
# 	 	pipe = subprocess.Popen(['euca-describe-images','--config',ec2conffile],stdin=subprocess.PIPE,stdout=subprocess.PIPE)
# 	 	pipe = subprocess.Popen(['awk','{print $3}'],stdin=pipe.stdout,stdout=subprocess.PIPE)
# 	 	pipe = subprocess.Popen(['grep','-v','None'],stdin=pipe.stdout,stdout=subprocess.PIPE)
# 	 	pipe = subprocess.Popen(['sed','s/^[0-9]*\///'],stdin=pipe.stdout,stdout=subprocess.PIPE)
# 	 	pipe = subprocess.Popen(['sed','s/.qcow.manifest.xml//'],stdin=pipe.stdout,stdout=subprocess.PIPE)
# 	pipe = subprocess.Popen(command_line,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE,bufsize=-1)
# 	all_images = pipe.communicate()[0]
# 	
# 	 split the string into a list.
# 	print image_list
# 	
# 	 remove all empty strings from the image list
# 	while (True):
# 		try:
# 			image_list.remove("")
# 		except ValueError:
# 			break
# 			
# 	

# 	return list(set(image_list))


def my_file_splitter(path):
         pieces = path.split('/')
         if pieces[0] == 'trunk':
             branch = None
             pieces.pop(0) # remove 'trunk'
         elif pieces[0] == 'branches':
             pieces.pop(0) # remove 'branches'
             # grab branch runtests_force_stablename
             branch = 'branches/' + pieces.pop(0)
         #else:
         #    return None # something weird
         #if branch != 'trunk' && branch != 'branches/stable' :
          #   return None # wrong project
	
         return (branch, '/'.join(pieces))
    
   


def create_build_factory(branch, platform):

	test_list = ['cp','misc','mkdir-sysint','ping','symlink-sysint','zerofill','append','append2','bonnie','dbench','fdtree','fstest','fsx','iozone','ltp','mkdir-vfs','shelltest','symlink-vfs','tail','vfs-cp','functions','heidelberg-IO','ior-mpiio','ior-mpiio-2','ior-mpiio-3','mpi-io-test','noncontig','romio-async','romio-coll_test','romio-error','romio-excl','romio-file_info','romio-noncontig_coll2','romio-psimple','romio-simple','romio-split_coll','romio-status','stadler-file-view-test']
	
	my_factory = BuildFactory()
	number_instances='2'
	vmtype='m1.small'
	my_url_base = "http://www.orangefs.org/svn/orangefs/"
	my_url = my_url_base+"branches/OFSTest-dev"
	pieces = branch.split('/')
	if pieces[0] == 'branches':
		branch_short = pieces[1]
	else:
		branch_short = pieces[0]
	
	
	# Download the OFSTest software
	my_factory.addStep(SVN(repourl=my_url))
	#my_factory.addStep(ShellCommand(command=['./runalltests','-s',branch,'-i',platform,'-n',number_instances,'-t',vmtype,'-c','/home/jburton/Projects/Testing/ec2rc.sh','-k','Buildbot','-f','/home/jburton/Projects/Testing/buildbot/buildbot.pem',my_vfs_test_parm,my_mpi_test_parm,my_delete_instances_parm,my_usrint_test_parm],timeout=14400))
	my_factory.addStep(ShellCommand(command=["./start_test","-f","./config/OFSTest-defaults.conf",
								"-d",Interpolate('%(prop:buildername)s-%(prop:buildnumber)s'),
								"ofs_resource_location=%s%s" % (my_url_base,branch),
								"cloud_image=%s" % platform,
								"ofs_resource_type=SVN",
								'number_new_cloud_nodes=%s' % number_instances,
								'cloud_machine=%s' % vmtype,
								'run_mpi_tests=False',
								'run_vfs_tests=True',
								'run_sysint_tests=True',
								'run_hadoop_tests=True',
								'cloud_delete_after_tests=True',
								'enable_strict=True',
								'ofs_security_mode=None',
								'install_MPI=False'
								],
					timeout=14400))
	my_factory.addStep(ShellCommand(command=["/bin/cat",Interpolate("./%(prop:buildername)s-%(prop:buildnumber)s/OFSTest.log")]))
	# look for failures in the log. If found, return 1
	my_factory.addStep(ShellCommand(command=Interpolate("if /bin/grep \"FAIL\" ./%(prop:buildername)s-%(prop:buildnumber)s/OFSTest.log; then exit 1; else exit 0; fi")))
	my_factory.addStep(ShellCommand(command=["/bin/cat",Interpolate("./%(prop:buildername)s-%(prop:buildnumber)s/ofsnode-commands.log")]))
	
	
	
	
	
	# grep for each test in the list. This will light up the buildbot for each test passing or failing.
	
	
	return my_factory

userlist=[("jburto2","jburto2"),("kdiefen","kdiefen"),("denton","denton"),("ligon","ligon"),("sampson","sampson"),("walt","walt"),("b","b"),("elaine","elaine"),("k","k"),("hubcap","hubcap"),("wolf","wolf"),("marbran","marbran")]

def canBuild(username, builder_status):
	

	if username == 'jburto2':
		return True # jburto2 can force whatever they want
	builder_name = builder_status.getName()
	print "Username %s, builder_status %s" % (username, builder_name)
	
	if username in builder_name:
		return True # any authenticated user can run smoketest
	else:
		return False


         
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("auto-slave", "pass"), BuildSlave("personal-slave1", "pass"), BuildSlave("personal-slave2", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9990

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

#from buildbot.changes.gitpoller import GitPoller
#c['change_source'] = []
#c['change_source'].append(GitPoller(
#        'git://github.com/buildbot/pyflakes.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollinterval=300))

#check trunk and branches/stable        
from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = []
#c['change_source'].append(SVNPoller("http://www.orangefs.org/svn/orangefs",split_file=my_file_splitter,pollinterval=3600))
c['change_source'].append(SVNPoller("http://www.orangefs.org/svn/orangefs/trunk",pollinterval=300))
c['change_source'].append(SVNPoller("http://www.orangefs.org/svn/orangefs/branches/stable",pollinterval=300))




from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.forcesched import *
from buildbot.changes import filter

from buildbot.schedulers.basic import SingleBranchScheduler



from buildbot.process.factory import BuildFactory
#from buildbot.steps.source.git import Git
from buildbot.steps.source.svn import SVN
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig



my_branch_list = find_branches("http://www.orangefs.org/svn/orangefs/branches")
my_branch_list.append("trunk")
my_image_list=find_images("/home/jburton/cuer1/OrangeFS-openrc.sh","/home/jburton/.jburtonpw")

print my_image_list

my_flavor_list=["m1.tiny","m1.small","m1.medium","m1.large","m1.xlarge","w1.standard","m2.medium"]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.


my_slave_list = []
my_slave_list.append("auto-slave")

my_builder_name_list = []
c['builders'] = []
c['schedulers'] = []

test_branch_list = ['trunk']
test_image_list = ['cloud-centos6','cloud-ubuntu-12.04','cloud-opensuse-13.1','cloud-centos5','cloud-ubuntu-14.04','cloud-fedora-19','cloud-rhel7-stock','cloud-sles11-sp3']

auto_test_image_list = ['cloud-centos6','cloud-ubuntu-14.04','cloud-sles11-sp3']

#start the nightly tests at 8:00.
my_time=20;

for my_branch in test_branch_list:
    for my_image in test_image_list:
        # create build_factory
        my_factory = create_build_factory(my_branch,my_image)
        # name = branch:platform
        my_builder_name = "%s:%s" % (my_branch,my_image)
        print "Builder name: %s" % my_builder_name
        # add buildername to list for forcescheduler
        my_builder_name_list.append(my_builder_name)

        #create_builder
        c['builders'].append(BuilderConfig(name=my_builder_name,slavenames=my_slave_list,factory=my_factory))
        #schedule one build every hour
        if my_image in auto_test_image_list:
            c['schedulers'].append(SingleBranchScheduler(
                            name="auto-%s" % my_builder_name,
                            builderNames=[my_builder_name], 
                            change_filter=filter.ChangeFilter(branch=my_branch),
                            treeStableTimer=300))
            c['schedulers'].append(Nightly(
                            name="nightly-%s" % my_builder_name,
                            builderNames=[my_builder_name], hour=(my_time % 24), minute=0,
                            branch=my_branch))
 
        c['schedulers'].append(ForceScheduler(
                            name="force-%s" % str(my_builder_name),
                            # will generate nothing in the form, but revision, repository,
							 # and project are needed by buildbot scheduling system so we
							 # need to pass a value ("")
                            branch=FixedParameter(name="branch", default=""),
                            revision=FixedParameter(name="revision", default=""),
                            repository=FixedParameter(name="repository", default=""),
                            project=FixedParameter(name="project", default=""),
                            properties = [],
                            builderNames=[str(my_builder_name)]
                            ))
        #increment time to schedule one build every two hours
        my_time = my_time + 2
        


		



      
      
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.


c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.mail import MailNotifier

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(userlist),
    gracefulShutdown = False,
    #forceBuild = 'auth', # use this to test your slave once it is set up
    forceBuild = canBuild,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = canBuild,
    stopAllBuilds = False,
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8011, authz=authz_cfg))

#c['status'].append(MailNotifier(fromaddr="jburto2@clemson.edu", sendToInterestedUsers=False, extraRecipients=["jburto2@clemson.edu","dcit2806_devorange-l@lists.clemson.edu"]))
c['status'].append(MailNotifier(fromaddr="jburto2@clemson.edu", sendToInterestedUsers=False, extraRecipients=["jburto2@clemson.edu"]))



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OrangeFS"
c['titleURL'] = "http://www.orangefs.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = "http://trail.clemson.edu:8011/"
c['buildbotURL'] = "http://issaqueena.clemson.edu:8011/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
